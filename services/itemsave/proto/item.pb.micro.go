// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: services/itemsave/proto/item.proto

package api_trac_cn_saveitem

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Save service

type SaveService interface {
	SaveItem(ctx context.Context, in *Item, opts ...client.CallOption) (*SaveResponse, error)
}

type saveService struct {
	c    client.Client
	name string
}

func NewSaveService(name string, c client.Client) SaveService {
	return &saveService{
		c:    c,
		name: name,
	}
}

func (c *saveService) SaveItem(ctx context.Context, in *Item, opts ...client.CallOption) (*SaveResponse, error) {
	req := c.c.NewRequest(c.name, "Save.SaveItem", in)
	out := new(SaveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Save service

type SaveHandler interface {
	SaveItem(context.Context, *Item, *SaveResponse) error
}

func RegisterSaveHandler(s server.Server, hdlr SaveHandler, opts ...server.HandlerOption) error {
	type save interface {
		SaveItem(ctx context.Context, in *Item, out *SaveResponse) error
	}
	type Save struct {
		save
	}
	h := &saveHandler{hdlr}
	return s.Handle(s.NewHandler(&Save{h}, opts...))
}

type saveHandler struct {
	SaveHandler
}

func (h *saveHandler) SaveItem(ctx context.Context, in *Item, out *SaveResponse) error {
	return h.SaveHandler.SaveItem(ctx, in, out)
}
